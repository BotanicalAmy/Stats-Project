head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
url <- "https://github.com/BotanicalAmy/Stats-Project/blob/main/finalproject_hotelbooking_clean.csv"
# Load the data
hotel_bookings <- read.csv(url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
url <- "https://github.com/BotanicalAmy/Stats-Project/blob/main/finalproject_hotelbooking_clean.csv"
# Load the data
hotel_bookings <- read.csv(url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(url)
head(hotel_bookings)
# Load the data
hotel_bookings <- read.csv(url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(file_url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(file_url, show_col_types = FALSE)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(file_url)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
head(hotel_bookings)
head(hotel_bookings)
# see the column names
colnames(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(file_url, header = TRUE, show_col_types = FALSE)
head(hotel_bookings, show_col_types = FALSE)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/finalproject_hotelbooking_clean.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/hotelbooking_cleaned.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/hotel_booking_cleaned.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/hotel_booking_cleaned.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
# Create a new column GroupSize by adding Adults and Children
hotel_bookings$`GroupSize` <- hotel_bookings$Adults + hotel_bookings$Children
# Preview the data
head(hotel_bookings)
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/hotel_booking_cleaned.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
# Create a new column GroupSize by adding Adults and Children
hotel_bookings$`GroupSize` <- hotel_bookings$Adults + hotel_bookings$Children
# Preview the data
head(hotel_bookings)
# Create a new column GroupSize by adding Adults and Children
hotel_bookings$GroupSize <- hotel_bookings$Adults + hotel_bookings$Children
hotel_bookings$StayLength <- hotel_bookings$Weekends + hotel_bookings$Weeknights
# Preview the data
head(hotel_bookings)
# Correlation Analysis for Hotel Cancellations
# Load required libraries
library(dplyr)
library(corrplot)
library(ggplot2)
# Read the dataset (adjust file path as needed)
hotel_data <- read.csv("path_to_your_hotel_bookings.csv")
# Correlation Analysis for Hotel Cancellations
# Convert Status to binary numeric variable (1 = Canceled, 0 = Not_Canceled)
hotel_bookings$Canceled <- ifelse(hotel_bookings$Status == "Canceled", 1, 0)
# Create a dataframe with only the variables of interest
analysis_data <- hotel_bookings %>%
select(Canceled, LeadTime, AvgPrice, GroupSize, StayLength)
# Check for missing values
sum(is.na(analysis_data))
# Option 1: Create a correlation matrix
correlation_matrix <- cor(analysis_data, use = "complete.obs")
print(correlation_matrix)
# Option 2: Visualize the correlation matrix
corrplot(correlation_matrix,
method = "color",
type = "upper",
addCoef.col = "black",
tl.col = "black",
diag = FALSE,
title = "Correlation Matrix for Cancellation Prediction",
mar = c(0,0,1,0))
# Option 3: Create point-biserial correlations specifically for binary vs continuous variables
# This is essentially the same as Pearson correlation when one variable is binary
# The correlation with Canceled shows the strength and direction of relationship with cancellation
# Option 4: Statistical testing for variable differences between groups
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_data %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
# Correlation Analysis for Hotel Cancellations
# Convert Status to binary numeric variable (1 = Canceled, 0 = Not_Canceled)
hotel_bookings$Canceled <- ifelse(hotel_bookings$Status == "Canceled", 1, 0)
# Create a dataframe with only the variables of interest
analysis_data <- hotel_bookings %>%
select(Canceled, LeadTime, AvgPrice, GroupSize, StayLength)
# Check for missing values
sum(is.na(analysis_data))
# Option 1: Create a correlation matrix
correlation_matrix <- cor(analysis_data, use = "complete.obs")
print(correlation_matrix)
# Option 2: Visualize the correlation matrix
corrplot(correlation_matrix,
method = "color",
type = "upper",
addCoef.col = "black",
tl.col = "black",
diag = FALSE,
title = "Correlation Matrix for Cancellation Prediction",
mar = c(0,0,1,0))
# Option 3: Create point-biserial correlations specifically for binary vs continuous variables
# This is essentially the same as Pearson correlation when one variable is binary
# The correlation with Canceled shows the strength and direction of relationship with cancellation
# Option 4: Statistical testing for variable differences between groups
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
print(group_comparison)
# Option 5: Visualization of variable distributions by cancellation status
# Example for LeadTime
ggplot(hotel_bookings, aes(x = LeadTime, fill = Status)) +
geom_density(alpha = 0.5) +
labs(title = "Distribution of Lead Time by Cancellation Status",
x = "Lead Time (days)",
y = "Density") +
theme_minimal()
# Correlation Analysis for Hotel Cancellations
# Convert Status to binary numeric variable (1 = Canceled, 0 = Not_Canceled)
hotel_bookings$Canceled <- ifelse(hotel_bookings$Status == "Canceled", 1, 0)
# new dataframe with only the variables of interest
analysis_data <- hotel_bookings %>%
select(Canceled, LeadTime, AvgPrice, GroupSize, StayLength)
# Option 1: Create a correlation matrix
correlation_matrix <- cor(analysis_data, use = "complete.obs")
print(correlation_matrix)
# correlation matrix for quantitative predictors
corrplot(correlation_matrix,
method = "color",
type = "upper",
addCoef.col = "black",
tl.col = "black",
diag = FALSE,
title = "Correlation Matrix for Cancellation Prediction",
mar = c(0,0,1,0))
# Option 4: Statistical testing for variable differences between groups
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
print(group_comparison)
# Correlation Analysis for Hotel Cancellations
# Convert Status to binary numeric variable (1 = Canceled, 0 = Not_Canceled)
hotel_bookings$Canceled <- ifelse(hotel_bookings$Status == "Canceled", 1, 0)
# new dataframe with only the variables of interest
analysis_data <- hotel_bookings %>%
select(Canceled, LeadTime, AvgPrice, GroupSize, StayLength)
# Option 1: Create a correlation matrix
# correlation_matrix <- cor(analysis_data, use = "complete.obs")
# print(correlation_matrix)
# correlation matrix for quantitative predictors
corrplot(correlation_matrix,
method = "color",
type = "upper",
addCoef.col = "black",
tl.col = "black",
diag = FALSE,
title = "Correlation Matrix for Cancellation Prediction",
mar = c(0,0,1,0))
# Option 4: Statistical testing for variable differences between groups
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
print(group_comparison)
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
print(group_comparison)
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
print(group_comparison)
# Alternative approach: Create a single plot with facets
# Reshape data from wide to long format for faceting
library(tidyr)
hotel_long <- hotel_bookings %>%
select(Status, LeadTime, AvgPrice, GroupSize, StayLength) %>%
pivot_longer(cols = c(LeadTime, AvgPrice, GroupSize, StayLength),
names_to = "Variable",
values_to = "Value")
# Create faceted boxplot
ggplot(hotel_long, aes(x = Status, y = Value, fill = Status)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4")) +
labs(title = "Comparison of Variables by Cancellation Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
print(group_comparison)
hotel_long <- hotel_bookings %>%
select(Status, LeadTime, AvgPrice, GroupSize, StayLength) %>%
pivot_longer(cols = c(LeadTime, AvgPrice, GroupSize, StayLength),
names_to = "Variable",
values_to = "Value")
# faceted boxplots for quantitative variables
ggplot(hotel_long, aes(x = Status, y = Value, fill = Status)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4")) +
labs(title = "Comparison of Quantitative Variables by Cancellation Status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/hotel_booking_cleaned.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
# new column GroupSize by adding Adults and Children
hotel_bookings$GroupSize <- hotel_bookings$Adults + hotel_bookings$Children
# new column StayLength by adding weekend and weeknights
hotel_bookings$StayLength <- hotel_bookings$Weekends + hotel_bookings$Weeknights
# Preview the data
head(hotel_bookings)
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
print(group_comparison)
hotel_long <- hotel_bookings %>%
select(Status, LeadTime, AvgPrice, GroupSize, StayLength) %>%
pivot_longer(cols = c(LeadTime, AvgPrice, GroupSize, StayLength),
names_to = "Variable",
values_to = "Value")
# faceted boxplots for quantitative variables
ggplot(hotel_long, aes(x = Status, y = Value, fill = Status)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4")) +
labs(title = "Comparison of quantitative variables by cancellation status") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
