logit <- intercept + (lead_time_coef * lead_time)
probability <- 1 / (1 + exp(-logit))
return(probability)
}
# Function to calculate odds of cancellation
cancellation_odds <- function(lead_time) {
prob <- cancellation_probability(lead_time)
odds <- prob / (1 - prob)
return(odds)
}
# Create a sequence of lead times from 0 to 365 days
lead_times <- seq(0, 365, by = 1)
# Calculate probabilities and odds for each lead time
probabilities <- sapply(lead_times, cancellation_probability)
odds <- sapply(lead_times, cancellation_odds)
# Create a data frame for plotting
plot_data <- data.frame(
LeadTime = lead_times,
Probability = probabilities,
Odds = odds
)
# Create visualization
# Set up a 2x1 plotting layout
par(mfrow = c(2, 1), mar = c(4, 4, 0, 2))
# Plot 1: Probability vs Lead Time
plot(plot_data$LeadTime, plot_data$Probability,
type = "l", col = "royalblue", lwd = 2,
xlab = "Lead Time (days)", ylab = "Probability of Cancellation",
main = NULL,  # Remove internal title
ylim = c(0, 1))
grid()
# Add title above the plot using mtext
mtext("Probability of Cancellation vs Lead Time", side = 3, line = 2.5, cex = 1.5, font = 2, col = "black", adj = 0.5)
# Add reference points
reference_points <- c(0, 30, 60, 90, 180, 365)
reference_probs <- sapply(reference_points, cancellation_probability)
points(reference_points, reference_probs, pch = 19, col = "#FF6B6B")
# Add labels for probability reference points
text(reference_points, reference_probs,
labels = paste0(round(reference_probs*100, 1), "%"),
pos = 3, col = "gray11")
# Plot 2: Odds vs Lead Time
plot(plot_data$LeadTime, plot_data$Odds,
type = "l", col = "midnightblue", lwd = 2,
xlab = "Lead Time (days)", ylab = "Odds of Cancellation",
main = "Odds of Cancellation vs Lead Time",
ylim = c(0, 6))
grid()
# Add reference points for odds
reference_odds <- sapply(reference_points, cancellation_odds)
points(reference_points, reference_odds, pch = 19, col = "#FF6B6B")
# Add labels for odds reference points
text(reference_points, reference_odds,
labels = paste0(round(reference_odds, 2)),
pos = 3, col = "gray11")
# Reset plotting parameters
par(mfrow = c(1, 1))
# Additional information: Compare probability and odds changes
reference_table <- data.frame(
LeadTime = reference_points,
Probability = round(reference_probs, 4),
ProbabilityPercentage = paste0(round(reference_probs*100, 1), "%"),
Odds = round(reference_odds, 4)
)
# Print reference table
# print(reference_table)
# Calculate and display odds ratios for different intervals
base_odds <- cancellation_odds(0)
odds_ratios <- sapply(reference_points[-1], function(lt) {
cancellation_odds(lt) / base_odds
})
cat("\nPercentage change in odds from Lead Time = 0:\n")
for (i in 1:length(odds_ratios)) {
pct_change <- (odds_ratios[i] - 1) * 100
cat(sprintf("Lead Time = %d days: %.1f%% change in odds\n",
reference_points[i+1], pct_change))
}
# Calculate and display odds ratio for one-day change
one_day_odds_ratio <- exp(lead_time_coef)
cat(sprintf("\nOdds ratio for one-day increase in lead time: %.4f\n", one_day_odds_ratio))
cat(sprintf("This corresponds to a %.2f%% decrease in odds per day\n",
(1 - one_day_odds_ratio) * 100))
# Parameters from your logistic regression model
intercept <- 1.8046260
lead_time_coef <- -0.0117484
# Function to calculate probability of cancellation
cancellation_probability <- function(lead_time) {
logit <- intercept + (lead_time_coef * lead_time)
probability <- 1 / (1 + exp(-logit))
return(probability)
}
# Function to calculate odds of cancellation
cancellation_odds <- function(lead_time) {
prob <- cancellation_probability(lead_time)
odds <- prob / (1 - prob)
return(odds)
}
# Create a sequence of lead times from 0 to 365 days
lead_times <- seq(0, 365, by = 1)
# Calculate probabilities and odds for each lead time
probabilities <- sapply(lead_times, cancellation_probability)
odds <- sapply(lead_times, cancellation_odds)
# Create a data frame for plotting
plot_data <- data.frame(
LeadTime = lead_times,
Probability = probabilities,
Odds = odds
)
# Create visualization
# Set up a 2x1 plotting layout
par(mfrow = c(2, 1), mar = c(4, 4, 2, 2))
# Plot 1: Probability vs Lead Time
plot(plot_data$LeadTime, plot_data$Probability,
type = "l", col = "royalblue", lwd = 2,
xlab = "Lead Time (days)", ylab = "Probability of Cancellation",
main = "Probability of Cancellation vs Lead Time",
ylim = c(0, 1))
grid()
# Add reference points
reference_points <- c(0, 30, 60, 90, 180, 365)
reference_probs <- sapply(reference_points, cancellation_probability)
points(reference_points, reference_probs, pch = 19, col = "#FF6B6B")
# Add labels for probability reference points
text(reference_points, reference_probs,
labels = paste0(round(reference_probs*100, 1), "%"),
pos = 3, col = "gray11")
# Plot 2: Odds vs Lead Time
plot(plot_data$LeadTime, plot_data$Odds,
type = "l", col = "midnightblue", lwd = 2,
xlab = "Lead Time (days)", ylab = "Odds of Cancellation",
main = "Odds of Cancellation vs Lead Time",
ylim = c(0, 6))
grid()
# Add reference points for odds
reference_odds <- sapply(reference_points, cancellation_odds)
points(reference_points, reference_odds, pch = 19, col = "#FF6B6B")
# Add labels for odds reference points
text(reference_points, reference_odds,
labels = paste0(round(reference_odds, 2)),
pos = 3, col = "gray11")
# Reset plotting parameters
par(mfrow = c(1, 1))
# Additional information: Compare probability and odds changes
reference_table <- data.frame(
LeadTime = reference_points,
Probability = round(reference_probs, 4),
ProbabilityPercentage = paste0(round(reference_probs*100, 1), "%"),
Odds = round(reference_odds, 4)
)
# Print reference table
# print(reference_table)
# Calculate and display odds ratios for different intervals
base_odds <- cancellation_odds(0)
odds_ratios <- sapply(reference_points[-1], function(lt) {
cancellation_odds(lt) / base_odds
})
cat("\nPercentage change in odds from Lead Time = 0:\n")
for (i in 1:length(odds_ratios)) {
pct_change <- (odds_ratios[i] - 1) * 100
cat(sprintf("Lead Time = %d days: %.1f%% change in odds\n",
reference_points[i+1], pct_change))
}
# Calculate and display odds ratio for one-day change
one_day_odds_ratio <- exp(lead_time_coef)
cat(sprintf("\nOdds ratio for one-day increase in lead time: %.4f\n", one_day_odds_ratio))
cat(sprintf("This corresponds to a %.2f%% decrease in odds per day\n",
(1 - one_day_odds_ratio) * 100))
# front-matter
rm(list = ls()) #clear the workspace
library(Stat2Data)
library(tidyverse)
library(mosaic)
library(ggformula)
library(emmeans)
library(knitr)
library(kableExtra)
library(dplyr)
knitr::opts_chunk$set(echo = F)
# URL to the raw CSV file on GitHub
# this clean version has a series of dates that with odd formatting and missing year and month values as a result
# the dates were reformatted for the affected rows, months and years replaced the missing values
# Use the raw content URL instead of the repository page URL
file_url <- "https://raw.githubusercontent.com/BotanicalAmy/Stats-Project/main/hotel_booking_clean.csv"
hotel_bookings <- read.csv(file_url, header = TRUE)
# new column GroupSize by adding Adults and Children
hotel_bookings$GroupSize <- hotel_bookings$Adults + hotel_bookings$Children
# new column StayLength by adding weekend and weeknights
hotel_bookings$StayLength <- hotel_bookings$Weekends + hotel_bookings$Weeknights
# Add HasChildren column
hotel_bookings$HasChildren <- ifelse(hotel_bookings$Children > 0, 1, 0)
# Preview the data
# head(hotel_bookings)
# quantitative EDA
# Compare means of each quantitative variable between canceled and not canceled groups
group_comparison <- hotel_bookings %>%
group_by(Status) %>%
summarize(
Mean_LeadTime = mean(LeadTime, na.rm = TRUE),
Mean_AvgPrice = mean(AvgPrice, na.rm = TRUE),
Mean_GroupSize = mean(GroupSize, na.rm = TRUE),
Mean_StayLength = mean(StayLength, na.rm = TRUE)
)
# Round numeric columns to 3 decimal places
group_comparison_formatted <- group_comparison %>%
mutate(across(where(is.numeric), ~round(., 3)))
# Create pretty kable table
kable(group_comparison_formatted, caption = "Quantitative Explanatory Variables") %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE, background = "#E8E8E8")
hotel_long <- hotel_bookings %>%
select(Status, LeadTime, AvgPrice, GroupSize, StayLength) %>%
pivot_longer(cols = c(LeadTime, AvgPrice, GroupSize, StayLength),
names_to = "Variable",
values_to = "Value")
# faceted boxplots for quantitative variables
ggplot(hotel_long, aes(x = Status, y = Value, fill = Status)) +
geom_boxplot() +
facet_wrap(~ Variable, scales = "free_y") +
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4")) +
labs(title = "Comparison of quantitative variables by cancellation status") +
theme_minimal()
# categorical EDA
# Create a bar chart with white background and title
gf_bar(~RoomType, fill=~Status, data = hotel_bookings) %>%
gf_labs(
title = "Cancellation by Room Type",
x = "Room Type",
y = "Count"
) %>%
gf_refine(
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4"))
) %>%
gf_theme(
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "bottom"
)
)
gf_bar(~Meal, fill=~Status, data = hotel_bookings) %>%
gf_labs(
title = "Cancellation by Meal Type",
x = "Meal Type",
y = "Count"
) %>%
gf_refine(
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4"))
) %>%
gf_theme(
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
legend.position = "bottom"
)
)
gf_bar(~Market, fill=~Status, data = hotel_bookings) %>%
gf_labs(
title = "Cancellation by Market Segment",
x = "Market Segment",
y = "Count"
) %>%
gf_refine(
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4"))
) %>%
gf_theme(
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
legend.position = "bottom"
)
)
# abbreviated month names in chronological order
month_order <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
# Convert Month to factor with levels in chronological order
hotel_bookings$Month <- factor(hotel_bookings$Month, levels = month_order)
# Create the bar chart with chronologically ordered months
gf_bar(~Month, fill=~Status, data = hotel_bookings) %>%
gf_labs(
title = "Cancellations by Month",
x = "Month",
y = "Count"
) %>%
gf_refine(
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4"))
) %>%
gf_theme(
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
legend.position = "bottom"
)
)
gf_bar(~Requests, fill=~Status, data = hotel_bookings) %>%
gf_labs(
title = "Cancellations by Request Count",
x = "Number of Special Requests",
y = "Count"
) %>%
gf_refine(
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4"))
) %>%
gf_theme(
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
legend.position = "bottom"
)
)
gf_bar(~HasChildren, fill=~Status, data = hotel_bookings) %>%
gf_labs(
title = "Cancellation by HasChildren",
x = "Has Children (0 = No, 1 = Yes)",
y = "Count"
) %>%
gf_refine(
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4"))
) %>%
gf_theme(
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
legend.position = "bottom"
)
)
gf_bar(~Parking, fill=~Status, data = hotel_bookings) %>%
gf_labs(
title = "Cancellation by Parking Option",
x = "Parking",
y = "Count"
) %>%
gf_refine(
scale_fill_manual(values = c("Canceled" = "#FF6B6B", "Not_Canceled" = "#4ECDC4"))
) %>%
gf_theme(
theme_minimal() +
theme(
plot.title = element_text(face = "bold", size = 14, hjust = 0.5),
legend.position = "bottom"
)
)
# Create a function to generate proportion tables
create_prop_table <- function(data, group_var) {
group_var <- enquo(group_var)
data %>%
group_by(!!group_var, Status) %>%
summarise(count = n(), .groups = "drop") %>%
group_by(!!group_var) %>%
mutate(proportion = count / sum(count))
}
# Now use the function with each variable
room_type_table <- create_prop_table(hotel_bookings, RoomType)
meal_table <- create_prop_table(hotel_bookings, Meal)
market_table <- create_prop_table(hotel_bookings, Market)
parking_table <- create_prop_table(hotel_bookings, Parking)
month_table <- create_prop_table(hotel_bookings, Month)
requests_table <- create_prop_table(hotel_bookings, Requests)
children_table <- create_prop_table(hotel_bookings, HasChildren)
# Function to create a nicely formatted kable table with rounded proportions
print_pretty_kable <- function(table_data, title) {
table_data <- table_data %>%
mutate(proportion = round(proportion, 3))
kable(table_data, caption = title) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE) %>%
column_spec(1, bold = TRUE) %>%
row_spec(0, bold = TRUE, background = "#E8E8E8")
}
# Print each table with nice formatting
print_pretty_kable(room_type_table, "Room Type")
print_pretty_kable(meal_table, "Meal Option")
print_pretty_kable(market_table, "Market")
print_pretty_kable(parking_table, "Parking")
print_pretty_kable(month_table, "Month")
print_pretty_kable(requests_table, "Special Requests")
print_pretty_kable(children_table, "Has Children")
# quantitative predictors
price_model <- glm(factor(Status) ~ AvgPrice, family = binomial(link = "logit"), data = hotel_bookings)
summary(price_model)
leadtime_model <- glm(factor(Status) ~ LeadTime, family = binomial(link = "logit"), data = hotel_bookings)
summary(leadtime_model)
staylength_model <- glm(factor(Status) ~ StayLength, family = binomial(link = "logit"), data = hotel_bookings)
summary(staylength_model)
groupsize_model <- glm(factor(Status) ~ GroupSize, family = binomial(link = "logit"), data = hotel_bookings)
summary(groupsize_model)
request_model <- glm(factor(Status) ~ Requests, family = binomial(link = "logit"), data = hotel_bookings)
summary(request_model)
#ASSESS
#converts status to binary where Canceled = 1 and Not_Canceled = 0, checking for linearity
hotel_bookings$Status_binary <- ifelse(hotel_bookings$Status == "Canceled", 1, 0)
emplogitplot1(Status_binary ~ LeadTime, data = hotel_bookings, ngroups = "all")
plot(leadtime_model, which = 1)
#USE
summary(leadtime_model)
# Parameters from your logistic regression model
intercept <- 1.8046260
lead_time_coef <- -0.0117484
# Function to calculate probability of cancellation
cancellation_probability <- function(lead_time) {
logit <- intercept + (lead_time_coef * lead_time)
probability <- 1 / (1 + exp(-logit))
return(probability)
}
# Function to calculate odds of cancellation
cancellation_odds <- function(lead_time) {
prob <- cancellation_probability(lead_time)
odds <- prob / (1 - prob)
return(odds)
}
# Create a sequence of lead times from 0 to 365 days
lead_times <- seq(0, 365, by = 1)
# Calculate probabilities and odds for each lead time
probabilities <- sapply(lead_times, cancellation_probability)
odds <- sapply(lead_times, cancellation_odds)
# Create a data frame for plotting
plot_data <- data.frame(
LeadTime = lead_times,
Probability = probabilities,
Odds = odds
)
# Create visualization
# Set up a 2x1 plotting layout
par(mfrow = c(2, 1), mar = c(4, 4, 2, 2))
# Plot 1: Probability vs Lead Time
plot(plot_data$LeadTime, plot_data$Probability,
type = "l", col = "royalblue", lwd = 2,
xlab = "Lead Time (days)", ylab = "Probability of Cancellation",
main = "Probability of Cancellation vs Lead Time",
ylim = c(0, 1))
grid()
# Add reference points
reference_points <- c(0, 30, 60, 90, 180, 365)
reference_probs <- sapply(reference_points, cancellation_probability)
points(reference_points, reference_probs, pch = 19, col = "#FF6B6B")
# Add labels for probability reference points
text(reference_points, reference_probs,
labels = paste0(round(reference_probs*100, 1), "%"),
pos = 3, col = "gray11")
# Plot 2: Odds vs Lead Time
plot(plot_data$LeadTime, plot_data$Odds,
type = "l", col = "midnightblue", lwd = 2,
xlab = "Lead Time (days)", ylab = "Odds of Cancellation",
main = "Odds of Cancellation vs Lead Time",
ylim = c(0, 6))
grid()
# Add reference points for odds
reference_odds <- sapply(reference_points, cancellation_odds)
points(reference_points, reference_odds, pch = 19, col = "#FF6B6B")
# Add labels for odds reference points
text(reference_points, reference_odds,
labels = paste0(round(reference_odds, 2)),
pos = 3, col = "gray11")
# Reset plotting parameters
par(mfrow = c(1, 1))
# Additional information: Compare probability and odds changes
reference_table <- data.frame(
LeadTime = reference_points,
Probability = round(reference_probs, 4),
ProbabilityPercentage = paste0(round(reference_probs*100, 1), "%"),
Odds = round(reference_odds, 4)
)
# Print reference table
# print(reference_table)
# Calculate and display odds ratios for different intervals
base_odds <- cancellation_odds(0)
odds_ratios <- sapply(reference_points[-1], function(lt) {
cancellation_odds(lt) / base_odds
})
cat("\nPercentage change in odds from Lead Time = 0:\n")
for (i in 1:length(odds_ratios)) {
pct_change <- (odds_ratios[i] - 1) * 100
cat(sprintf("Lead Time = %d days: %.1f%% change in odds\n",
reference_points[i+1], pct_change))
}
# Calculate and display odds ratio for one-day change
one_day_odds_ratio <- exp(lead_time_coef)
cat(sprintf("\nOdds ratio for one-day increase in lead time: %.4f\n", one_day_odds_ratio))
cat(sprintf("This corresponds to a %.2f%% decrease in odds per day\n",
(1 - one_day_odds_ratio) * 100))
mod1 <- glm(factor(Status) ~ RoomType, family = binomial(link = "logit"), data = hotel_bookings)
summary(mod1)
plot(mod1, which = 1)
mod2 <- glm(factor(Status) ~ Parking, family = binomial(link = "logit"), data = hotel_bookings)
summary(mod2)
plot(mod2, which = 1)
mod3 <- glm(factor(Status) ~ Market, family = binomial(link = "logit"), data = hotel_bookings)
summary(mod3)
plot(mod3, which = 1)
mod4 <- glm(factor(Status) ~ Meal, family = binomial(link = "logit"), data = hotel_bookings)
summary(mod4)
plot(mod4, which = 1)
mod5 <- glm(factor(Status) ~ Month, family = binomial(link = "logit"), data = hotel_bookings)
summary(mod5)
confint.default(mod5)
plot(mod5, which = 1)
#gets the confidence interval, which does not include 0 therefore valid
confint.default(leadtime_model)
#gets the CI on the odds ratio scale, for every 1 unit increase in LeadTime, the odds of cancellation
#(vs. non-cancellation) multiply by 0.9880 to 0.9881 w/95% confidence
exp(confint.default(leadtime_model))
# add table
price_model <- glm(factor(Status) ~ AvgPrice, family = binomial(link = "logit"), data = hotel_bookings)
summary(price_model)
leadtime_model <- glm(factor(Status) ~ LeadTime, family = binomial(link = "logit"), data = hotel_bookings)
summary(leadtime_model)
staylength_model <- glm(factor(Status) ~ StayLength, family = binomial(link = "logit"), data = hotel_bookings)
summary(staylength_model)
groupsize_model <- glm(factor(Status) ~ GroupSize, family = binomial(link = "logit"), data = hotel_bookings)
summary(groupsize_model)
